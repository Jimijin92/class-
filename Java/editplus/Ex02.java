/*

자바 콘솔 프로그램 작성

1. 프로그램 소스 작성
    -Java 언어 사용
	- *.java 저장
	- 클래스명과 파일명이 반드시 동일
    - 사용된 언어가 사람이 사용하는 언어

2. 컴파일, compile (사람이 쓰는 명령어를 기계어로 번역해주는 것) 컴파일러는 번역가 자바컴파일러 씨컴파일러 등등
    - 소스파일 -> (번역) -> 기계어
	- 컴파일러, compiler //프로그램
    - javac.exe
    - javac.exe 소스파일
    - 결과물 : 번역된 결과 -> *.class 파일(클래스 파일, 실행 파일, 바이너리 파일)

3. 실행, Run
    - 2차 컴파일(최종번역본, 한꺼번에, 나중에 또 번역할 필요 없음/ 단점은 번역하는데 시간이 너무 오래걸림/자바), 인터프리터(그때그때, 나중에 또 보고 싶으면 또 번역해야함, 매번 번역비용 동일하게 들어감/초기비용이 많이 듬 누가 더 낫다고는 말 못함/html,java script) 
	- java.exe
	- 결과물 x -> 기계어 (메모리에만 잠시올라와있다가 프로세스 끝나고 소멸)
    - JIT 컴파일러(Just In Time)

    (참고)
	- class -> 중간언어
    - 왜? 
	- 어느 운영체제에서도 호환가능 그래서 느리다. 2차컴파일   
	- 플랫폼에 자유롭기 위해서
    - 교집합 프로그램 
*/


/*

식별자 규칙
-폴더, 파일, 클래스명, 메소드명, 변수명 등등...
1. 영문자 + 숫자 + _ (공백포함 안됨)
2. 숫자로 시작 X -> _2017
3. 의미있게(******) -> 약어 사용X


소스편집 -> 공백 사용 -> 자바컴파일러는 (종류에 상관없이) 연속된 공백을 무시한다.
1. space
2. enter
3. tap

코딩 컨벤션

대소문자 철저하게 구분한다.
문법 엄격 -> 컴파일 방식

*/



class Ex02 {

	public static void main(String[] args) {

		// 콘솔에 문자열을 출력하는 명령어 
		// 왜 문제가 없을까?-> 컴파일러가 해석하지 않는다.

        System.out.println("안녕하세요");System.out.println("안녕하세요");System.out.println("안녕하세요");  //문장의 끝은 항상 ; 세미콜론=문장종결자
		 


 
		//외우기 http://terms.co.kr
		// ~(tild), !, @, #, $, %, ^, &, *, -, +, |, ', " 
		// () 괄호 
		// {} 중괄호
		// [] 대괄호
		// <> 화살표괄호

		

	}

}