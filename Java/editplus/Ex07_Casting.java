class Ex07_Casting {

	public static void main(String[] args) {

	//Ex07_Casting.java
	//Type Casting, Casting, 자료형 변환, 형변환
	//	- A라는 자료형을 B라는 자료형으로 바꾸는 행동
	

	//1. 암시적인 형변환
	//	- 큰형 = 작은형;
	//	- 2칸 =1칸;
	//	- 100% 안전

	byte b1 =10; //원본
	short s1; //복사본

	//short(2) = byte(1)
	s1 = b1; //s1 = (short)b1;으로 해도 상관없음, 근데 안함

	System.out.println(s1);

	//2. 명시적인 형변환
	//	- 작은형 = 큰형;
	//	- 1칸 = 2칸;
	//	- 성공 혹은 실패

	short s2 = 300; 
	byte b2;

	//byte(1) = short(2)
	//() : 형변환 연산자

	//
	b2 = (byte)s2; // 자바가 우리에게 책임을 떠넘긴거 무조건(byte)써야함

					// 복사 과정에서 일어난 오버플로우는 지원을 함, 300이 왜 44가 됐는지 궁금할 필요x 어차피 쓰레기숫자
					// 그래서 보통 앞에 범위검사 먼저함
	
	System.out.println(b2);//복사본



	//은행 계좌
	long m1 = 2200000000L;

	int m2;

	m2 = (int)m1;

	System.out.println("잔액 : " + m2 );

	//에러, Error
	//	- 프로그램 구문이나 순서, 관계 등에 오류가 발생해서 잘못된 결과를 발생
	//	- 버그(Bug), 예외(Exception)
    

	//***1. 컴파일 에러
	//	- 컴파일 작업 중에 발생하는 에러
	//	- 초기 단계에서 발생
	//	- 문법 틀림!!(주로 오타 발생)
	//	- 발생 빈도 높음
	//	- 수정 난이도 낮음 -> 에러 메시지
	//	- 이 에러를 잘 정리!!


	//***2. 런타임 에러
	//	- runtime : 프로그램 실행 중..
	//	- 에외(Exception)
	//	- 컴파일은 성공(문법은 틀리지 않음) -> 실행 중 발생
	//	- ex) 외부와의 입출력 작업 시
	//	- 발생 빈도 높음
	//	- 수정 난이도 높음


	//int n = 0; //사용자 입력

	//System.out.println(100/n); //(컴파일러는 100나누기 정수로 생각하지 0이라고 생각 안함)// 컴파일러는 앞뒤 안따지고 문장단위로 번역한다고 생각하기 


	//3. 논리 오류
	//	- 컴파일o, 실행o, 유효x
	//	- 발생 빈도 다양
	//	- 수정 난이도 최고!!


	int n = 10;
	System.out.println(n-1);

	



	

	
	}

}
