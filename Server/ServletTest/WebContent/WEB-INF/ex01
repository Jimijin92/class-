   
   Client Side Programming
   - 브라우저에 동작 (실행) 하는 언어(기술)
   1. HTML
   2. CSS
   3. JavaScript
   4. jQuery/Bootstrap
   
   Server Side Programming
   - 웹서버에서 동작(실행) 하는 언어 (기술)
   - 웹서버 : 아파치(웹서버) + 톰캣(WAS , Web application Server)
   1. Servlet
   2. JSP
   3. Servelt + JSP
   4. Spring + MyBatis
   
   생성한 Dynamic Web Project 의 구조!
   1. Java Resources
      a. src
         - 패키지와 자바 클래스를 관리하는 폴더!
         - 일반 클래스 (클래스 , 인터페이스 , 추상 클래스)
         - 서블릿 클래스
         - DAO , DTO 등..
         
      b. Libraries
         - 라이브러리의 골격!
         - JRE System Library
            - 위의 자바 클래스들이 사용할 JRE 라이브러리
         - Apache Tomcat v9.0
            - Servlet/JSP 등 자바 웹 기술들을 사용하는데 필요한 라이브러리
            
      
   2. WebContent
      - 브라우저를 통해서 제공되는 리소드를 관리하는 폴더 
      - 웹페이지 (*.html) , 이미지 , CSS , JS파일 등..
      - 리소스들의 최상위 폴더!
      - WebContent 하위에 자유롭게 폴더 생성 가능!
      a. META-INF
         - 시스템 폴더
      b. WEB-INF    
         - (굉장히 많이 건들인다)
         - 웹 사이트의 환경 설정에 관련된 역할..
         - 브라우저는 이 폴더에 대한 접근 권한이 없다!
         (웹 페이지 , 이미지 , CSS , JS 등의 파일을 이 폴더 이하에 넣으면 접근 불가능!)
      c. WEB-INF/lib
         - Library(*.jar > 클래스 집합)
         - 사용자 정의 폴더
         - 개발자가 추가하고 싶은 라이브러리 파일을 넣는 곳
      d. WEB-INF/web.xml
         - 가장 중요한 파일!!
         - 추가 생성
         - Deployment Descriptor
         - 웹 사이트의 기본적인 환경 설정 파일
         - Servelt / JSP / 기타 등등 설정 역할
         
      ==============================================================================================
      Servelt , 서블릿
      
      - 자바 언어를 사용해서 [동적으로] 웹페이지를 생성하는 기술!
      - Server + Applet = 서버측에서 동작하는 자바 프로그램
      - 웹 서버측에 바자 클래스 구현 + 컴파일 + 실행
      - 브라우저 요청을 받아서 업무 처리 + 웹페이지 생성한 뒤 브라우저에게 돌려주는 기술!
      
         
   정적 페이지 vs 동적 페이지
   - 정적페이지: *.htm
   - 동적페이지: *.jsp, *.do, *.action, *.htm
   
   Servlet, 서블릿
   - 웹 애플리케이션(사이트)를 동적으로 생성하는 기술 
   
   CGI, Common Gateway Interface
   - 브라우저와 웹서버간의 데이터(정보)를 주고받는 규약
   - 이걸 구현한 기술 : Servlet, PHP, ASP 등...
   - C언어, Perl 언어를 사용해서 구현 -> 웹 전용 개발 언어(기술) 구현(Servlet..)
   
   ASP, Active Server pages
   - MS
   - Visual Basic -> VBScript 사용
   - 쉽다. (기능이 적다.) -> 다른 라이브러리 참조가 쉽다. 
   - JSP와 유사 
   
   ASP.NET
   - MS
   - C#사용
   
   PHP, Personal Homepage Preprocessor
   - C기반 스크립트 언어
   - 개인 사이트용 -> 기업용 많이 사용 
   - 100%무료
   - Apache + PHP + MySQL + Linux
   
   JSP, Java Server Pages
   - MS의 ASP를 자바 버전으로 구현 
   ===================================================================================================================================
   
   웹서비스, Web Services
   
   - 웹 서버(아파치 톰캣)와 클라이언트(크롬)간의 통신 - 웹페이지, 이미지 등등을 주고 받는 서비스 
   - 웹 서버 프로그램과 클라이언트 프로그램간의 요청(컨텐츠가 담긴 페이지를 브라우저가 서버에게 요청)을 하고 응답(브라우저가 요구한 페이지를 반환)을 하는 통신
   
   HTTP 프로토콜
   - 인터넷 프로토콜: TCP/IP, FTP, SMTP, HTTP 등등....
   - 브라우저 <-> 웹서버 : HTTP사용 
   - HTTP 프로토콜 : 요청(Request)과 응답 (Response)의 형태로 구성되어 있다.
   - 요청(Request)
   a. GET: 요청한 URL의 정보를 가져온다.
   b. POST: 요청한 URL에 새로운 정보를 보낸다. 
   
   HTTP 응답 메시지
   - 시작 라인 + 헤더 + 본문 
   
   헤더
   1. 일반 헤더, General Headers
   - 클라이언트와 서버 모두 사용하는 헤더 
   a. Request URL: http://localhost: 8083/ServletTest/hello.htm
  		- 요청 URL
   b. Request Method: GET
   		- 요청 방식
   c. Status Code
   		- 상태 코드
   d. Remote Address
   		- 클라이언트 주소(브라우저의 컴퓨터 주소)
   e. Referrer Policy: no-referrer-when-downgrade
   
  2. 요청 헤더, Request Headers
  		- 브라우저가 서버에게 보내는 정보
  		a. Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
  			- 서버에게 내가 받을 수 있는 컨텐츠 종류를 알려줌 
   		b. Accept-Encoding: gzip, deflate, br
   			- 서버에게 내가 받을 수 있는 인코딩 종류를 알려줌
   		c. Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
   			- 서버에게 내가 받을 수 있는 언어를 알려줌 
   		------------------------------------------------------위로 세개는 안건드림, 브라우저가 알아서 보냄
   		d. Cache-Control: max-age=0
   			- 캐시 설정
   		e. Connection: keep-alive
   		f. Host: localhost: 8083
   			- 서버정보 
   		g.If-Modified-Since: Mon, 02 Apr 2018 01:44:33 GMT
   			- 페이지 정보
   		h.If-None-Match: W/"136-1522633473903"
   			- ?
   		i.Upgrade-Insecure-Requests: 1
   			- ?
   		j.User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36
   		k.
   			- 내 정보(브라우저 정보)****************
   			
   	  	3. 응답헤더, Response Headers
   	  	a.Date: Mon, 02 Apr 2018 01:46:17 GMT
   	  		- 응답시간
   	  	b.ETag: W/"136-1522633473903"
   	  	c.content-Length: 숫자********
   	  		- 응답 데이터 크기(웹페이지 사이즈)
   	  	d.content-Type: text/html:charset=UTF-8***************
   	  		- 응답 컨텐츠 종류 + 인코딩 
   
   		4. 상태 코드, status Code
   			- 서버가 브라우저에게 전달하는 상태
   			a.1xx: 정보
   				- 요청을 받았고 작업이 진행중이다. 거의 못봄
   			b.2xx: 성공
   				- 요청을 성공적으로 받았고 승락했다. 
   				- 200 OK: 성공적으로 처리했다.
   				- 206 Partial Content: 컨텐츠의 일부분만 제공한다.
   			c.3xx: 리다이렉트
   				- 이 요청을 완료하려면 리다이렉션이 이루어져야 한다. 
   				- 예) http://goo.gl/Acde23 
   				-----------------------------------------------------------------여기까지는 화면에 안보임
   				-----------------------------------------------------------------여기부터는 에러메시지가 브라우저에 출력됨
   			d.4xx: 클라이언트 오류
   				- 이 요청은 올바르지 않다.
   				- 400 Bad Request: 요청 자체가 잘못됐다.
   				- 401 Unauthorized: 인증이 필요한데 인증없이 접근했다.
   				- 403 Forbidden : 서버가 요청을 거부한다.
   				- 404 Not Found: 요청한 리소스가 없다.(URL 틀림 )
   				- 408 Request Timeout: 요청 시간이 초과됐다. 
   			e.5xx: 서버 오류 
   				- 요청은 올바르지만 서버측에서 응답할 수 없다. (자바를 잘못하면 발생)
   				- 500 Internal Server Error: 서버 작업 중 오류가 발생해서 요청 작업을 수행할 수 없다. 자바(오라클)에러 -> 자바코드나 SQL뒤져보기
   				- 502 Bad Gateway: 게이트웨이 동작 오류 
   				- 504 Gateway Timeout: 게이트웨이 응답지연 
   				- 520 Unknown Error: 알 수 없는 오류
   				
   				
   				   
   페이지 동적 생성 -> 알바생 -> 자바 클래스(프로그램) -> 서블릿으로 구현 -> 서블릿 클래스 
   
   Servlet Class 작성 규칙 
   1. 서블릿 클래스 선언 
   		a. javax.servlet.Servlet 인터페이스를 구현해야 된다.(상속)
   			- 복잡함. 모든 내용을 직접 구현 
   		b. javax.servlet.httpServlet 클래스를 상속받아야 한다.(상속)
   			- 간편함. 대부분의 코드를 미리 구현해놨기 때문 
   
   2. doGet/doPost 메소드 선언 		
   		- 둘 중 1개 이상을 구현 
   		- doGet()
   		- doPost()
   		- doGet() + doPost()		
   		- 클라이언트의 요청이 들어오면 자동으로 실행되는 메소드 
   		- 알바생이 주문을 받고 작업을 시작하는 메소드 
   		- 이 메소드내에서 동적으로 HTML 문서를 생성한다.(********************)
   		- 메소드 작성 규칙 
   			a. 매개변수 작성
   				- javax.servlet.http.HttpServletRequest
   				- javax.servlet.http.HttpServletResponse
   			b. 예외 미루기 (처리)
				- throws.java.IOException
				- throws.javax.servlet.ServletException
				
	3. 메소드 내부 구현
		- 동적 HTML 작성하는 업무를 구현 
		- HttpServletResponse 객체의 getWriter() 호출 -> PrintWriter 반환
		- PrintWriter == BufferedWriter 과 유사
		- PrintWriter 객체의 printXXX()를 사용해서 HTML 코드를 작성 
	
	4. 브라우저 요청 가능한 URL 매핑
		- 가상 주소 매핑 -> web.xml
		
   
   서블릿 동작
   		- 서블릿(서블릿 클래스와 인스턴스)은 서블릿 컨테이너(톰캣)가 생성하고 실행하고 관리한다. 
   		- 톰캣: 서블릿 컨테이너, WAS : http://apache.org
   		
   1.클라이언트의 URL요청
   		- 브라우저가 요청했다.
   		- 사전에 웹 서버측에[가상 URL + 서블릿 클래스]로 매핑되어 있는 배포 서술서(Deployment Descriptor,
   		web.xml)가 있어야 한다.
   	
   2. 톰캣에게 전달
   3. request, response 객체 생성 
   		- 컨테이너가 받은 요청을 처리하기 위해서 두 객체를 미리 생성한다. 
   		- request: HTTP 요청을 처리한다.
   		- response: HTTP 응답을 처리한다.
   		
   4. 서블릿 인스턴스 생성 
   		- *.java ->(complie) -> *.class -> (new) -> instance
   		- 서블릿의 init() 메소드가 호출된다. 
   		
   5. service() 메소드 호출
   		- service()메소드가 호출되면 그 내부에서 HTTP 요청 방식을 확인한다.
   			+ request(response) 객체 전달 
   			-> GET: doGet() 메소드를 호출한다. 
   			-> POST: doPost() 메소드를 호출한다. 
   					
   6. doGet()/doPost() 메소드 호출 
   		- HTML 페이지를 동적으로 생성하는 역할 
   		- HTML 페이지 생성 이외의 업무도 담당 
   
   7. 응답
   		- doGet()/doPost() 메소드에 웹 페이지 생성 -> 결과물을 response 객체에 담는다. 
   			-> 컨테이너가 HTTP응답, 메시지로 바꿔서 웹서버에 전달한다.
   		- 응답 메시지를 작성하는데 사용했던 모든 자원들을 해제한다. -> request, response 객체를 버린다. 
   		
   	8. 재요청 발생
   		- 동일한 서블릿에게 또 요청이 발생하면.. 일부 단계를 생략한다. 
   		- 첫요청: request/response 객체 생성 -> 서블릿 객체 생성 -> init() 호출 -> service() 호출 
   						-> doGet/doPost() 호출 -> 응답 -> request/response 객체 소멸
   		- 재요청: request/response 객체 생성 -> service() 호출 
   						-> doGet/doPost() 호출 -> 응답 -> request/response 객체 소멸	
   	
   	
 A. 페이지 -> (데이터 전달) -> B페이지(반드시 서버기술을 사용해야 한다.) 

 1. *.htm -> *.do
 		: 가능

 2. *.do -> *.do
 		: 가능

 3. *.do -> *.htm
 		: 불가능

 4. *.htm -> *.htm
 		: 불가능   		
   		
  
  
 [데이터 전송]
숫자입력 -> 입력한 수만큼 고양이 출력
Ex04_send.java
Ex04_Receive.java

어제] html -> servlet
오늘] servlet -> servlet   		
   		
   		
   		
   		
   		
   		
   		
   		
   		
   		
   
   
   
   
   
   
   
   
   